#!/usr/bin/env python3
# - D√©tection de spoofing (vitesse + SNR) ; alerte visuelle + bascule en mode autonome
# - En mode autonome : suit un itin√©raire OSM (A* par NetworkX) du point courant vers le point final d‚Äôun CSV (ECEF)

import os
import threading
import serial
import pynmea2
import math
import time
import pandas as pd
from collections import deque
from flask import Flask, render_template_string
from flask_socketio import SocketIO
import osmnx as ox
import networkx as nx
from shapely.geometry import LineString, Point

# D√©tecteurs externes (les autres codes)
from detector_speed import SpeedDetector
from detector_snr import SNRDetector

# ------------------ Configuration ------------------
PORT = 'COM4'                     # Port s√©rie du r√©cepteur GNSS
BAUDRATE = 9600                   # D√©bit NMEA
MAX_SPEED_M_S = 30                # (R√©serv√©) vitesse max utilis√©e ailleurs si besoin
SMOOTHING_WINDOW = 5              # Fen√™tre de lissage (moyenne) sur les points "snapp√©s"
OSM_RADIUS_METERS = 1000          # Rayon (m) pour charger le graphe routier autour de la position
MAX_DISPLAY_JUMP_METERS = 80      # Saut max autoris√© entre 2 points affich√©s (anti-glitch)
STABILIZATION_DURATION = 30       # D√©lai initial avant d‚Äôautoriser une bascule autonome
start_time = time.time()          # Timestamp de d√©marrage du script (pour temporiser)

OUTPUT_CSV_PATH = r"E:\gps-sdr-sim\output.csv"  # Trajectoire cible (ECEF) utilis√©e pour g√©n√©rer un but autonome
AUTONOMOUS_DELAY = 1.0            # D√©lai (s) entre deux points simul√©s en mode autonome
RAYON_OSM = 3000                  # Rayon (m) pour g√©n√©rer l‚Äôitin√©raire autonome (graphe OSM)

# Instances des d√©tecteurs
snr_detector = SNRDetector()
speed_detector = SpeedDetector()
autonomous_mode = False        

# ------------------ Serveur Flask + Socket.IO ------------------
app = Flask(__name__)
socketio = SocketIO(app)

# --------- HTML avec double trac√© (vert = GNSS, bleu = autonome) ---------
# - Deux banni√®res : alerte rouge (spoofing) et info bleue (mode autonome)
# - R√©ception d‚Äô√©v√©nements 'position', 'alert', 'autonomous' via Socket.IO
html_template = """
<!DOCTYPE html>
<html>
<head>
    <title>Trajectoire GPS en temps r√©el</title>
    <meta charset="utf-8" />
    <style>
        #map { height: 100vh; margin: 0; padding: 0; }
        html, body { margin: 0; padding: 0; }
        .banner {
            position: fixed;
            top: 0; left: 0;
            width: 100%; z-index: 1000;
            font-size: 24px;
            text-align: center;
            padding: 10px;
            display: none;
        }
        #alertBanner { background-color: red; color: white; }
        #autoBanner { background-color: blue; color: white; top: 50px; }
    </style>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
</head>
<body>
    <div id="alertBanner" class="banner">üö® SPOOFING D√âTECT√â !!!</div>
    <div id="autoBanner" class="banner">‚öôÔ∏è BASCULEMENT EN MODE AUTONOME...</div>
    <div id="map"></div>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script>
        const map = L.map('map').setView([0, 0], 2);  // Vue initiale large
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 20,
        }).addTo(map);

        let path_green = [];     // Trace GNSS (r√©el)
        let path_blue = [];      // Trace autonome (simul√©)
        let marker = null;       // Curseur position actuelle (quel que soit le mode)
        let polyline_green = null;
        let polyline_blue = null;

        const socket = io();

        // Position re√ßue (lat, lon, color)
        socket.on('position', data => {
            const lat = data.lat;
            const lon = data.lon;
            const color = data.color || 'green';
            const coord = [lat, lon];

            if (!marker) {
                marker = L.marker(coord).addTo(map);
                map.setView(coord, 17);
            } else {
                marker.setLatLng(coord);
            }

            if (color === 'green') {
                path_green.push(coord);
                if (polyline_green) map.removeLayer(polyline_green);
                polyline_green = L.polyline(path_green, { color: 'green' }).addTo(map);
            } else if (color === 'blue') {
                path_blue.push(coord);
                if (polyline_blue) map.removeLayer(polyline_blue);
                polyline_blue = L.polyline(path_blue, { color: 'blue' }).addTo(map);
            }
        });

        // Affiche la banni√®re d‚Äôalerte rouge
        socket.on('alert', () => {
            document.getElementById("alertBanner").style.display = "block";
        });

        // Affiche la banni√®re bleue (mode autonome)
        socket.on('autonomous', () => {
            document.getElementById("autoBanner").style.display = "block";
        });
    </script>
</body>
</html>
"""

@app.route('/')
def index():
    return render_template_string(html_template)

# ------------------ Utilitaires g√©od√©siques ------------------
def haversine(coord1, coord2):
    """Distance Haversine (m√®tres) entre deux (lat, lon) en degr√©s."""
    R = 6371000
    lat1, lon1 = map(math.radians, coord1)
    lat2, lon2 = map(math.radians, coord2)
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    a = math.sin(dlat/2)**2 + math.cos(lat1)*math.cos(lat2)*math.sin(dlon/2)**2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
    return R * c

def ecef_to_latlon(x, y, z):
    """
    Conversion ECEF -> g√©od√©sique (lat, lon) approxim√©e.
    Utilis√©e pour r√©cup√©rer un point d'arriv√©e: point final (depuis CSV ECEF).
    """
    a = 6378137.0
    e = 8.1819190842622e-2
    b = math.sqrt(a**2 * (1 - e**2))
    ep = math.sqrt((a**2 - b**2) / b**2)
    p = math.sqrt(x**2 + y**2)
    th = math.atan2(a * z, b * p)
    lon = math.atan2(y, x)
    lat = math.atan2((z + ep**2 * b * math.sin(th)**3), (p - e**2 * a * math.cos(th)**3))
    return math.degrees(lat), math.degrees(lon)

# ------------------ G√©n√©ration d‚Äôun itin√©raire autonome OSM ------------------
def generate_autonomous_path(start_latlon):
    """
    Construit un chemin OSM (liste de (lat, lon)) :
      1) Lit OUTPUT_CSV_PATH (ECEF) et convertit le dernier point en lat/lon (destination)
      2) Charge un graphe OSM autour du milieu (start/dest)
      3) Cherche les n≈ìuds OSM les plus proches des points start/dest
      4) Calcule le plus court chemin (poids = longueur) avec NetworkX
      5) Extrait la g√©om√©trie des ar√™tes et renvoie les coordonn√©es uniques
    """
    try:
        # CSV ECEF : colonnes "time, X, Y, Z"
        df = pd.read_csv(OUTPUT_CSV_PATH, header=None, names=["time", "X", "Y", "Z"])
        end_x, end_y, end_z = df.iloc[-1][["X", "Y", "Z"]]
        end_latlon = ecef_to_latlon(end_x, end_y, end_z)

        # Centre de t√©l√©chargement OSM 
        mid_lat = (start_latlon[0] + end_latlon[0]) / 2
        mid_lon = (start_latlon[1] + end_latlon[1]) / 2

        # Graphe OSM 
        G = ox.graph_from_point((mid_lat, mid_lon), dist=RAYON_OSM, network_type='walk')

        # Trouver les n≈ìuds les plus proches pour d√©part/arriv√©e
        orig_node = ox.distance.nearest_nodes(G, start_latlon[1], start_latlon[0])
        dest_node = ox.distance.nearest_nodes(G, end_latlon[1], end_latlon[0])

        # Chemin le plus court ; NetworkX choisit par d√©faut Dijkstra
        route = nx.shortest_path(G, orig_node, dest_node, weight="length")

        # Reconstitution de la g√©om√©trie du parcours (lat, lon)
        coords = []
        for u, v in zip(route[:-1], route[1:]):
            edge_data = G.get_edge_data(u, v, 0)  # premi√®re ar√™te (cl√© 0)
            geom = edge_data.get("geometry", None)
            if geom:
                coords.extend([(pt[1], pt[0]) for pt in geom.coords])
            else:
                coords.append((G.nodes[u]['y'], G.nodes[u]['x']))
                coords.append((G.nodes[v]['y'], G.nodes[v]['x']))

        # Retirer les doublons tout en conservant l‚Äôordre
        seen = set()
        return [c for c in coords if not (c in seen or seen.add(c))]

    except Exception as e:
        print("Erreur g√©n√©ration itin√©raire :", e)
        return []

def simulate_autonomous_movement(last_coord):
    """
      - Affiche banni√®re "autonomous" c√¥t√© client
    """
    print(" Basculement en mode autonome...")
    socketio.emit('autonomous')
    route_coords = generate_autonomous_path(last_coord)
    print(f" Trajectoire autonome g√©n√©r√©e : {len(route_coords)} points")
    for lat, lon in route_coords:
        socketio.emit('position', {'lat': lat, 'lon': lon, 'color': 'blue'})
        time.sleep(AUTONOMOUS_DELAY)
    print(" Parcours autonome termin√©.")

# ------------------ Lecture GNSS + logique de bascule ------------------
def gps_reader():
    """
    Lit le port s√©rie et :
      - Passe chaque GGA au d√©tecteur de vitesse
      - Passe chaque GSV au d√©tecteur SNR
      - Affiche en vert la trajectoire "snapp√©e" sur la route (map matching simple)
      - D√©clenche l'alerte + retourne la derni√®re coordonn√©e affich√©e pour lancer le mode autonome
    """
    global autonomous_mode
    buffer = deque(maxlen=SMOOTHING_WINDOW)  
    last_display_coord = None               
    road_network = None                   
    network_loaded = False               

    try:
        ser = serial.Serial(PORT, BAUDRATE, timeout=1)
        print(f"Connexion ouverte sur {PORT}")

        while True:
            line = ser.readline().decode('ascii', errors='replace').strip()

            # ----- GGA : position + fix -> d√©tection de vitesse -----
            if line.startswith('$GPGGA') or line.startswith('$GNGGA'):
                status, speed, spoof = speed_detector.process(line)

                # Si spoofing confirm√© par la vitesse, et d√©lai initial d√©pass√© -> bascule autonome
                if spoof and not autonomous_mode:
                    if time.time() - start_time > STABILIZATION_DURATION:
                        print("Spoofing confirm√© par la vitesse !")
                        socketio.emit('alert')  # banni√®re rouge
                        autonomous_mode = True
                        return last_display_coord  

                # Map-matching + affichage en vert (trajectoire r√©elle)
                try:
                    msg = pynmea2.parse(line)
                    if int(msg.gps_qual) > 0:
                        lat, lon = msg.latitude, msg.longitude
                        if lat == 0 or lon == 0:
                            continue  # ignore coordonn√©es invalides

                        # Charger le r√©seau routier au premier point valide
                        if not network_loaded:
                            road_network = ox.graph_from_point((lat, lon), dist=OSM_RADIUS_METERS, network_type='walk')
                            network_loaded = True

                        # Trouver l‚Äôar√™te la plus proche puis projeter le point sur sa g√©om√©trie
                        nearest_edge = ox.distance.nearest_edges(road_network, lon, lat)
                        u, v, key = nearest_edge
                        edge_data = road_network.get_edge_data(u, v, key)

                        # G√©om√©trie de l‚Äôar√™te (LineString) ; sinon segment simple entre n≈ìuds
                        line_geom = edge_data['geometry'] if 'geometry' in edge_data else LineString([
                            (road_network.nodes[u]['x'], road_network.nodes[u]['y']),
                            (road_network.nodes[v]['x'], road_network.nodes[v]['y'])
                        ])

                        # Projection du point sur la ligne 
                        projected = line_geom.interpolate(line_geom.project(Point(lon, lat)))
                        snapped_coord = (projected.y, projected.x)

                        # Lissage par moyenne glissante (r√©duit les petits zig-zags)
                        buffer.append(snapped_coord)
                        if len(buffer) >= 2:
                            avg_lat = sum(p[0] for p in buffer) / len(buffer)
                            avg_lon = sum(p[1] for p in buffer) / len(buffer)
                            smoothed = (avg_lat, avg_lon)

                            # Anti-glitch visuel : si le saut est trop grand, on masque ce point
                            if last_display_coord:
                                dist_display = haversine(last_display_coord, smoothed)
                                if dist_display > MAX_DISPLAY_JUMP_METERS:
                                    print(f"Saut masqu√© √† l'affichage : {dist_display:.1f} m")
                                    continue

                            # Envoi au front (trace verte)
                            socketio.emit('position', {'lat': smoothed[0], 'lon': smoothed[1], 'color': 'green'})
                            last_display_coord = smoothed

                except:
                    continue

            # ----- GSV : constellation + SNR -> d√©tection d‚Äôanomalies SNR/PRN -----
            elif line.startswith('$GPGSV') or line.startswith('$GNGSV'):
                status, causes, spoof = snr_detector.process_gsv_for_snr(line)

                # Si spoofing confirm√© par SNR/PRN, et d√©lai initial d√©pass√© -> bascule autonome
                if spoof and not autonomous_mode:
                    if time.time() - start_time > STABILIZATION_DURATION:
                        print("Spoofing confirm√© par analyse SNR !")
                        for cause in causes:
                            print(f"Cause : {cause}")
                        socketio.emit('alert')
                        autonomous_mode = True
                        return last_display_coord 

    except Exception as e:
        print("Erreur GPS :", e)

    return last_display_coord

if __name__ == '__main__':
    def gps_thread():
        last_coord = gps_reader()
        if autonomous_mode and last_coord:
            simulate_autonomous_movement(last_coord)

    threading.Thread(target=gps_thread, daemon=True).start()
    print(" Ouvre ton navigateur sur http://localhost:5000")
    socketio.run(app, host='0.0.0.0', port=5000)
